#!/usr/bin/env python
# coding: utf-8

import numpy as np
import pywt

def aad_index(amino):

    return {
        "A": 1,
        "C": 2,
        "D": 3,
        "E": 4,
        "F": 5,
        "G": 6,
        "H": 7,
        "I": 8,
        "K": 9,
        "L": 10,
        "M": 11,
        "N": 12,
        "P": 13,
        "Q": 14,
        "R": 15,
        "S": 16,
        "T": 17,
        "V": 18,
        "W": 19,
        "Y": 20,
        "X": 21

    }.get(amino,"wrong amino")



def Physicochemical_properties_X(seq):
    """
    Use ten Physicochemical properties to encode protein 
    input: seq(str): protein sequence
    output: P(matrix): a 10*len(seq) matrix 
    """
    
    # GUYH850102
    aa_code1 = np.array([0.05, -0.84, 0.41, 0.38, -0.45, 0.31, -0.41, -0.69, 0.57, -0.62, -0.38, 0.29,0.46, 0.46, 0.12, 0.12, 0.38, -0.46, -0.98, -0.25, 0])
    # EISD840101
    aa_code2 = np.array([0.25, 0.04, -0.72, -0.62, 0.61, 0.16, -0.40, 0.73, -1.10, 0.53, 0.26, -0.64, -0.07, -0.69, -1.76, -0.26, -0.18, 0.54, 0.37, 0.02, 0])
    # FAUJ880111
    aa_code3 = np.array([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0])
    # JACR890101
    aa_code4 = np.array([0.18, 0.27, -2.36, -2.10, 0.50, 0.09, -1.48, 0.37, -2.53, 0.41, 0.44, -1.30, -0.20, -1.22, -5.40, -0.40, -0.34, 0.32, -0.01, -0.08, 0])
    # GUYH850101
    aa_code5 = np.array([0.100,  -1.420, 0.780, 0.830, -2.120, 0.330, -0.500, -1.130, 1.400, -1.180, -1.590, 0.480, 0.730, 0.950, 1.910, 0.520, 0.070, -1.270, -0.510, -0.210, 0])
    # WOLS870103
    aa_code6 = np.array([0.09, 4.13, 2.36, -0.07, 0.45, 0.30, 1.11, -1.03, -3.14, -0.98, -0.41, 0.84, 2.23,  -1.14, -3.44, 0.57, -1.40, -1.29, 0.85, 0.01, 0])
     # KLEP840101
    aa_code7 = np.array([0., 0., -1., -1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0])
     # LIFS790101
    aa_code8 = np.array([0.92, 1.16, 0.48, 0.61, 1.25, 0.61, 0.93, 1.81, 0.70, 1.30, 1.19, 0.60, 0.40, 0.95, 0.93, 0.82, 1.12, 1.81, 1.54, 1.53, 0])
     # LIFS790103
    aa_code9 = np.array([0.90, 1.24, 0.47, 0.62, 1.23, 0.56, 1.12, 1.54, 0.74, 1.26, 1.09, 0.62, 0.42, 1.18, 1.02, 0.87, 1.30, 1.53, 1.75, 1.68, 0])
     # RADA880108
    aa_code10 = np.array([-0.06, 1.36, -0.80, -0.77, 1.27, -0.41, 0.49, 1.31, -1.18, 1.21, 1.27, -0.48, 0., -0.73, -0.84, -0.50, -0.27, 1.09, 0.88, 0.33, 0])

    aa_phy_prop = np.vstack((aa_code1,aa_code2,aa_code3,aa_code4,aa_code5,aa_code6, aa_code7,aa_code8,aa_code9,aa_code10))

    mean_aa_code = [np.mean(aa_code1),np.mean(aa_code2),np.mean(aa_code3),np.mean(aa_code4), np.mean(aa_code5),np.mean(aa_code6),np.mean(aa_code7),np.mean(aa_code8), np.mean(aa_code9),np.mean(aa_code10)]
    std_aa_code = [np.std(aa_code1,ddof=1),np.std(aa_code2,ddof=1),np.std(aa_code3,ddof=1), np.std(aa_code4,ddof=1),np.std(aa_code5,ddof=1),np.std(aa_code6,ddof=1), np.std(aa_code7,ddof=1),np.std(aa_code8,ddof=1),np.std(aa_code9,ddof=1), np.std(aa_code10,ddof=1)]
    
    aa_code = np.zeros((10,21)) 

    for i in range(10):
        for j in range(21):
            aa_code[i][j] = (aa_phy_prop[i][j] - mean_aa_code[i]) / std_aa_code[i]
    P = np.zeros((10,len(seq)))    

    for i in range(len(seq)):
        P[:,i] = aa_code[:,aad_index(seq[i])-1]

    return P
        
   
def DWT(P,i):
    """
    Use DWT to further extract the protein feature
    input: P(matrix):physicochemical properties matrix
              i(int):0~9,the order of the ten physicochemical properties in P.0 represents the first physicochemical properties,1 represents the second,etc..
    output: feature_vec(list):the feature vect which generated by DWT
    """
    
    coeffs = pywt.wavedec(P[i,:], 'haar', level = 3)
    feature_vec = []
    for coeff in coeffs:
        coeff_max = max(coeff)
        feature_vec.append(coeff_max)
   
    for coeff in coeffs:
        coeff_max = np.mean(coeff)
        feature_vec.append(coeff_max)
   
    for coeff in coeffs:
        coeff_max = min(coeff)
        feature_vec.append(coeff_max)
  
    for coeff in coeffs:
        coeff_max = np.std(coeff)
        feature_vec.append(coeff_max)
    
    return feature_vec



def co_dwt(seq):  
    """Conbine the ten physicochemical properties's 16 coefficients as a 1_dim matix
    input:seq(str):protein amino acid sequeence.
    output:seven_fea_mat(ndarray):The protein amino acid sequeence 's ten features,every raw represents a feature.
    """
    P = Physicochemical_properties_X(seq)  
    fea_mat = []
    for i in range(10):
        feature_vec = DWT(P,i)
        fea_mat.append(feature_vec)
    
    fea_mat = np.hstack((fea_mat[0],fea_mat[1],fea_mat[2],fea_mat[3],fea_mat[4],
                               fea_mat[5],fea_mat[6],fea_mat[7],fea_mat[8],fea_mat[9]))
    fea_mat = 1 / (1 + np.exp(-(fea_mat)))
    
    return fea_mat






